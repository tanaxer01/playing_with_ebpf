package main

import (
	"C"
	"log"
	"net"
	"os"
	"os/signal"
	"time"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/rlimit"
)

import (
	"errors"
	"syscall"

	"github.com/cilium/ebpf/perf"
)

func main() {
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal("Removing memlock:", err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := snifferObjects{}
	if err := loadSnifferObjects(&objs, nil); err != nil {
		log.Fatal("Loading eBPF objects:", err)
	}
	defer objs.Close()

	// Load the compiled eBPF ELF and load it into the kernel.
	ifname := os.Args[1]

	iface, err := net.InterfaceByName(ifname)
	if err != nil {
		log.Fatalf("Getting interface %s: %s", ifname, err)
	}

	// Attach count_packets to the network interface.
	link, err := link.AttachXDP(link.XDPOptions{
		Program:   objs.XdpHook,
		Interface: iface.Index,
	})
	if err != nil {
		log.Fatal("Attaching XDP:", err)
	}
	defer link.Close()

	//
	// Userspace
	//

	// Open a perf event reader for userspace on the PERV_EVENT_ARRAY map described in the
	// eBPF C program.
	rd, err := perf.NewReader(objs.XdpPerfMap, os.Getpagesize())
	if err != nil {
		log.Fatalf("creating perf event reader: %s", err)
	}
	defer rd.Close()

	go func() {
		// Wait for a signal and close the perf reader,
		// which will interrupt rd.Read() and make the program exit.
		<-stop
		log.Println("Received signal, exiting program...")

		if err := rd.Close(); err != nil {
			log.Fatalf("closing perf event reader: %s", err)
		}
	}()

	log.Printf("Sniffing received packets on %s...", ifname)

	// bpfEvent is generated by bpf2go.

	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, perf.ErrClosed) {
				return
			}

			log.Printf("reading from perf event reader: %s", err)
			continue
		}

		if record.LostSamples != 0 {
			log.Printf("perf event ring buffer full, dropped %d samples", record.LostSamples)
		}

		// Parse the perf event into a bpfEvent structure.
		// log.Printf("%s : %s",
	}

	/*
		tick := time.Tick(time.Second)
		for {
			select {
			case <-tick:
				var count uint64
				err := objs.XdpPerfMap.Lookup(uint32(0), &count)
				if err != nil {
					log.Fatal("Map lookup:", err)
				}
				log.Printf("Received %d packets", count)
			case <-stop:
				log.Print("Received signal, exiting..")
				return
			}
		}
	*/
}
