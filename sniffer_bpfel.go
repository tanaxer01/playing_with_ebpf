// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadSniffer returns the embedded CollectionSpec for sniffer.
func loadSniffer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SnifferBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load sniffer: %w", err)
	}

	return spec, err
}

// loadSnifferObjects loads sniffer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*snifferObjects
//	*snifferPrograms
//	*snifferMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSnifferObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSniffer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// snifferSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type snifferSpecs struct {
	snifferProgramSpecs
	snifferMapSpecs
}

// snifferSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type snifferProgramSpecs struct {
	XdpHook *ebpf.ProgramSpec `ebpf:"xdp__hook"`
}

// snifferMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type snifferMapSpecs struct {
	XdpPerfMap *ebpf.MapSpec `ebpf:"xdp_perf_map"`
}

// snifferObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSnifferObjects or ebpf.CollectionSpec.LoadAndAssign.
type snifferObjects struct {
	snifferPrograms
	snifferMaps
}

func (o *snifferObjects) Close() error {
	return _SnifferClose(
		&o.snifferPrograms,
		&o.snifferMaps,
	)
}

// snifferMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSnifferObjects or ebpf.CollectionSpec.LoadAndAssign.
type snifferMaps struct {
	XdpPerfMap *ebpf.Map `ebpf:"xdp_perf_map"`
}

func (m *snifferMaps) Close() error {
	return _SnifferClose(
		m.XdpPerfMap,
	)
}

// snifferPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSnifferObjects or ebpf.CollectionSpec.LoadAndAssign.
type snifferPrograms struct {
	XdpHook *ebpf.Program `ebpf:"xdp__hook"`
}

func (p *snifferPrograms) Close() error {
	return _SnifferClose(
		p.XdpHook,
	)
}

func _SnifferClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sniffer_bpfel.o
var _SnifferBytes []byte
